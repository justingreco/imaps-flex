<?xml version="1.0" encoding="utf-8"?>
<toolbar:ToolWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:toolbar="com.raleigh.components.toolbar.*"
					xmlns:layouts="com.greensock.layouts.*"
					maxWidth="1000" maxHeight="600" backgroundAlpha=".5" backgroundColor="0x000000"
					close="toolwindow1_closeHandler(event)"
					creationComplete="toolwindow1_creationCompleteHandler(event)"
					title="Photo {coverflow.selectedIndex+1} of {coverflow.dataProvider.length} Taken {dtf.format(coverflow.selectedItem.dateCreated)}">
	<toolbar:layout>
		<s:VerticalLayout horizontalAlign="center" paddingBottom="10" paddingLeft="10"
						  paddingRight="10" paddingTop="10"/>
	</toolbar:layout>
	<fx:Script>
		<![CDATA[
			import com.raleigh.control.Controller;
			import com.raleigh.model.Model;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.TitleWindow;
			


			[Bindable]
			private var controller:Controller = Controller.getInstance();
			[Bindable]
			public var selectedIndex:int = 0;
			[Bindable]
			public var selectedItem:Object;

			
	
			
			protected function toolwindow1_closeHandler(event:CloseEvent):void
			{
				heightWatcher.unwatch();
				
			}
			
			private var heightWatcher:ChangeWatcher;
			private var resizeExecuting:Boolean = false;
			
			protected function toolwindow1_creationCompleteHandler(event:FlexEvent):void
			{
				heightWatcher = ChangeWatcher.watch(FlexGlobals.topLevelApplication, 'height', onHeightChange);
				this.isPopUp = false;
				this.addEventListener(ResizeEvent.RESIZE, windowResize,false,0,true);
				function windowResize(event:ResizeEvent):void
				{
					PopUpManager.centerPopUp(event.currentTarget as TitleWindow);					
				}
			}
			
			private function onHeightChange(event:Event):void
			{
				if (!resizeExecuting)
					callLater(handleResize);
				resizeExecuting = true;
				
			}
			
			private function handleResize():void
			{
				if (this.height > FlexGlobals.topLevelApplication.height)
				{
					this.height = FlexGlobals.topLevelApplication.height - 10;
				}
				else
				{
					this.height = this.maxHeight;
				}
				PopUpManager.centerPopUp(this); 
				resizeExecuting = false;
			}

			
			import com.greensock.TweenLite;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			public function scrollGroup( n : int ) : void
			{
				var scrollPoint : Point = coverflow.layout.getScrollPositionDeltaToElement( n );
				var duration : Number = ( Math.max( scrollPoint.x, coverflow.layout.target.horizontalScrollPosition ) - Math.min( scrollPoint.x, coverflow.layout.target.horizontalScrollPosition )) * .002;
				TweenLite.to( coverflow.layout, duration, { horizontalScrollPosition: scrollPoint.x });
			}
			
			protected function timeMachine_caretChangeHandler( event : IndexChangeEvent ) : void
			{
				scrollGroup( event.newIndex );
				var photo:Object = coverflow.dataProvider.getItemAt(event.newIndex);
				mainImage.source=model.propertySearch.config.paths.path.(@name=='Building Photos').@url+photo.imageDir+"/"+photo.imageName;
				event.target.invalidateDisplayList();
			}
			
			protected function timeMachine_creationCompleteHandler() : void
			{
				
				var perspectiveProjection : PerspectiveProjection = new PerspectiveProjection();
				
				perspectiveProjection.projectionCenter = new Point( coverflow.width * .5, coverflow.height * .5 );
				coverflow.transform.perspectiveProjection = perspectiveProjection;
				coverflow.transform.perspectiveProjection.fieldOfView = 20.0;
			}

			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:DateTimeFormatter id="dtf" dateTimePattern="E MMMM d yyyy"/>
		<fx:Component id="PhotoItemRenderer">
			<s:ItemRenderer>
				<fx:Script>
					<![CDATA[
						import com.raleigh.model.Model;
						
						import spark.components.List;
						[Bindable]
						private var model:Model = Model.getInstance();	
						
						protected function image1_clickHandler(event:MouseEvent):void
						{
							var dg:List = this.owner as List;
							dg.parentDocument.mainImage.source = img.source;
						}
						
					]]>
				</fx:Script>
				<s:Image id="img" height="100%" maxWidth="200" maxHeight="150"
						 click="image1_clickHandler(event)"
						 source="{model.propertySearch.config.paths.path.(@name=='Building Photos').@url}{data.imageDir}/{data.imageName}"/>
			</s:ItemRenderer>
		</fx:Component>
	</fx:Declarations>

	<s:Image id="mainImage" height="100%" maxWidth="512" maxHeight="384"/>
	<s:List id="coverflow" width="100%" height="100%" minWidth="500" maxHeight="150"
			caretChange="timeMachine_caretChangeHandler(event)" contentBackgroundAlpha="0.9"
			contentBackgroundColor="0x000000"
			creationComplete="callLater(timeMachine_creationCompleteHandler); //coverflow_creationCompleteHandler(event)"
			horizontalScrollPolicy="off"
			itemRenderer="com.raleigh.components.paneltools.property.CoverflowPanelRenderer"
			scroller="{null}" selectedIndex="0">
		<s:layout>
			<layouts:CoverflowLayout id="coverflowLayout" distance="172" index="{selectedIndex}"
									 rotation="70" stepFade=".2"/>
		</s:layout>
		<s:AsyncListView list="{model.propertySearch.PhotosResult.lastResult.Photos}"/>
	</s:List>
	<s:HSlider id="indexSlider" width="100%" liveDragging="true"
			   maximum="{coverflow.dataProvider.length - 1}" minimum="0" stepSize="1"
			   value="@{ coverflow.selectedIndex }"/>

</toolbar:ToolWindow>
