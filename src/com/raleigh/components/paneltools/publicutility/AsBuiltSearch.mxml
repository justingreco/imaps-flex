<?xml version="1.0" encoding="utf-8"?>
<paneltools:BasePanelTool xmlns:fx="http://ns.adobe.com/mxml/2009"
						  xmlns:s="library://ns.adobe.com/flex/spark"
						  xmlns:mx="library://ns.adobe.com/flex/mx"
						  xmlns:paneltools="com.raleigh.components.paneltools.*"
						  xmlns:utils="com.raleigh.components.utils.*"
						  width="340" height="100%"
						  label="As-Built Search" 
						  xmlns:esri="http://www.esri.com/2008/ags"
						  creationComplete="init()">
	<fx:Script>
		<![CDATA[
			import com.esri.ags.FeatureSet;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.tasks.QueryTask;
			import com.esri.ags.tasks.supportClasses.Query;
			import com.esri.ags.tools.DrawTool;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.rpc.AsyncResponder;
			import mx.rpc.Fault;
			
			import spark.events.GridEvent;
			import spark.events.IndexChangeEvent;
			[Bindable]
			private var projects:ArrayCollection;
			
			private var loader:URLLoader;
			
			private function init():void
			{
				var configPath:String = getQualifiedClassName(this).substr(0,flash.utils.getQualifiedClassName(this).indexOf('::')).replace(/\./g,'/')+'/config.xml';
				loader = new URLLoader();
				loader.addEventListener(Event.COMPLETE, xmlLoaded);
				loader.load(new URLRequest(configPath));
			}
			private function xmlLoaded(event:Event):void
			{
				config = new XML(event.currentTarget.data);
				loader.removeEventListener(Event.COMPLETE, xmlLoaded);
				loader = new URLLoader();
				loader.addEventListener(Event.COMPLETE, projectsLoaded);
				loader.load(new URLRequest(config.asbuilt.projects.@url));
			}			
	
			
			private function projectsLoaded(event:Event):void
			{
				var xml:XML = new XML(event.currentTarget.data);
				projects = new ArrayCollection();
				for each(var project:Object in xml.project)
				{
					projects.addItem({"name":project.name.toString()});
				}
			}
			
			
			private function searchByName(name:String):void
			{
				q.geometry = null;
				q.where = "PROJECT = '"+name+"'";
				qt.url = config.asbuilt.query.(@id=='sewer').@url;
				qt.execute(q, new AsyncResponder(sewerQueryComplete, onFault));	
			}
			
			protected function draw_drawEndHandler(event:DrawEvent):void
			{
				if(event.graphic)
				{

					model.geomSrv.simplify([event.graphic.geometry], new AsyncResponder(simplifyComplete, onFault));
				}

			}
			
			private function simplifyComplete(geoms:Array, token:Object = null):void
			{
				if (geoms.length > 0)
				{
					q.where = "";
					q.geometry = geoms[0];
					qt.url = config.asbuilt.query.(@id=='sewer').@url;
					qt.execute(q, new AsyncResponder(sewerQueryComplete, onFault));						
				}
					
			}
			
			private function sewerQueryComplete(fs:FeatureSet, token:Object = null):void
			{
				dataGrid.dataProvider = new ArrayCollection(fs.features);
				qt.url = config.asbuilt.query.(@id=='water').@url;
				qt.execute(q, new AsyncResponder(waterQueryComplete,onFault));
			}
			private function waterQueryComplete(fs:FeatureSet, token:Object = null):void
			{
				dataGrid.dataProvider = new ArrayCollection(ArrayCollection(dataGrid.dataProvider).source.concat(fs.features));
			}
			private function onFault(fault:Fault, token:Object = null):void
			{
				Alert.show(fault.message.toString());
			}			
			
			protected function changeLayerVisLayers():void
			{
				if(sewerCheck.selected && waterCheck.selected)
				{
					asbuiltLayer.visibleLayers = new ArrayCollection([0,1]);
				}
				else if (sewerCheck.selected && !waterCheck.selected)
				{
					asbuiltLayer.visibleLayers = new ArrayCollection([0]);					
				}
				else if (!sewerCheck.selected && waterCheck.selected)
				{
					asbuiltLayer.visibleLayers = new ArrayCollection([1]);					
				}		
				else
				{
					asbuiltLayer.visibleLayers.removeAll();
				}
			}
			

			
			protected function dataGrid_gridClickHandler(event:GridEvent):void
			{
				if(event.rowIndex < dataGrid.dataProviderLength)
				{
					if (event.columnIndex < dataGrid.columns.length -1)
					{
						zoomToFeature(event.itemRenderer.data.geometry.extent);
					}
					else
					{
						var file:String = String(event.itemRenderer.data.attributes.HYPERLINK).replace(new RegExp(".tif","i"),".pdf");
						navigateToURL(new URLRequest(config.asbuilt.path.@url+"/"+file),"_blank");
					}					
				}
			}
			
			private function zoomToFeature(extent:Extent):void
			{
				map.extent = extent;
				if (map.extent.height < extent.height || map.extent.width < extent.width)
				{
					map.level -= 1;
				}
			}
			
			protected function dataGrid_keyUpHandler(event:KeyboardEvent):void
			{


					if (dataGrid.dataProviderLength > 0 && (event.keyCode == Keyboard.UP || event.keyCode == Keyboard.DOWN))
					{
						zoomToFeature(event.currentTarget.selectedItem.geometry.extent);
					}					


			}
			
	
			
			protected function ac_creationCompleteHandler(event:FlexEvent):void
			{
				ac.input.prompt = "South Salisbury Street";
				ac.list.addEventListener(IndexChangedEvent.CHANGE, stNameChangeHandler,false,0,true);
				function stNameChangeHandler(event:IndexChangeEvent):void
				{

						searchByName(ac.input.text);						
				
				}
			}
			
		]]>
	</fx:Script>
	<paneltools:layout>
		<s:VerticalLayout/>
	</paneltools:layout>
	<fx:Declarations>
		<fx:XML id="config" source="config.xml"/>
		<esri:DrawTool id="draw" map="{model.map}"
					   drawEnd="draw_drawEndHandler(event)"/>
		<esri:QueryTask id="qt"
						url="{config.asbuilt.query.(@id=='sewer').@url}"
						useAMF="true" showBusyCursor="false"/>
		<esri:Query id="q"
					outFields="{config.asbuilt.query.(@id=='sewer').@outfields}"
					returnGeometry="true"
					where="PROJECT IS NOT NULL ORDER BY PROJECT, PERMITNUM, SHEETNUM"/>
		<esri:ArcGISDynamicMapServiceLayer id="asbuiltLayer" url="{config.asbuilt.layer.@url}" alpha="{slider.value/100}"/>

	</fx:Declarations>
	<s:VGroup width="100%"  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<s:Label fontWeight="bold" text="As-Built Boundary Visiblity"/>
		<s:HGroup verticalAlign="middle" width="100%">
			<s:CheckBox id="sewerCheck" label="Sewer" selected="true" change="changeLayerVisLayers()"/>
			<s:CheckBox id="waterCheck" label="Water" selected="true" change="changeLayerVisLayers()"/>
			<s:HSlider id="slider" maximum="100" minimum="0" liveDragging="true" value="50"/>
		</s:HGroup>
		<s:Label fontWeight="bold" text="Search By Location"/>
		<utils:DrawButtonBar drawtool="{draw}">
			<s:ArrayList>
				<fx:Object label="Point" tool="{DrawTool.MAPPOINT}"/>
				<fx:Object label="Polygon" tool="{DrawTool.POLYGON}"/>
				<fx:Object label="Freehand" tool="{DrawTool.FREEHAND_POLYGON}"/>
			</s:ArrayList>
		</utils:DrawButtonBar>
		<s:Label fontWeight="bold" text="Search By Project Name"/>
		<utils:AutoComplete id="ac" width="100%" dataProvider="{projects}" displayField="name" minChars="3"  filterFields="{['name']}"
							creationComplete="ac_creationCompleteHandler(event)">
		</utils:AutoComplete>		
	</s:VGroup>

	<s:DataGrid id="dataGrid" width="100%" height="100%" 
				variableRowHeight="true"
				creationComplete="model.map.addLayer(asbuiltLayer);"
				addedToStage="asbuiltLayer.visible = true;" removedFromStage="asbuiltLayer.visible = false;"
				gridClick="dataGrid_gridClickHandler(event)"
				keyUp="dataGrid_keyUpHandler(event)">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="attributes.PROJECT" headerText="Project" width="160"></s:GridColumn>
				<s:GridColumn dataField="attributes.PERMITNUM" headerText="Permit #" width="60"></s:GridColumn>
				<s:GridColumn dataField="attributes.SHEETNUM" headerText="Sheet" width="60"></s:GridColumn>
				<s:GridColumn dataField="attributes.SHEETNUM"  headerText="PDF">
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer useHandCursor="true" buttonMode="true">
								<s:layout>
									<s:VerticalLayout verticalAlign="middle" horizontalAlign="center"/>
								</s:layout>
								<s:BitmapImage width="20" height="20" source="@Embed(source='assets/PDF.png')"
											   verticalAlign="middle" horizontalAlign="center"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				</s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Label fontWeight="normal" text="{dataGrid.dataProvider.length.toString()} records returned"/>
</paneltools:BasePanelTool>
