<?xml version="1.0" encoding="utf-8"?>
<toolbar:ToolWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:services="services.*"
					xmlns:toolbar="com.raleigh.components.toolbar.*"
					xmlns:stormwater="com.raleigh.components.paneltools.stormwater.*"
					showCloseButton="false" title="Change Site Address">
	<fx:Script>
		<![CDATA[
			import com.adobe.serializers.json.JSONDecoder;
			import com.esri.ags.utils.JSON;
			import com.raleigh.components.paneltools.property.SearchPanel;
			import com.raleigh.model.Model;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.GridSelectionEvent;
			import spark.events.IndexChangeEvent;
			
			protected function siteAddressesUpdated(event:ResultEvent):void{
				if (event.result == 1){
					model.stormwater.accountPanel.currentState=("NoProperty");
					model.stormwater.journalPanel.currentState=("NoJournal");
					var token:AsyncToken;
					var responder:AsyncResponder;
		
					
					token = model.stormwater.searchPanel.swuService.send({
						'function':'getstormwateraccount',
						acctid:model.stormwater.currentAccount.SWU_ACCOUNT_ID, 
						journalid:0, dbschema:model.stormwater.dbSchema,
						connstr:JSON.encode(model.stormwater.connstr)
					});
					responder =  new AsyncResponder(stormwaterAccountRetrieved, null);
					token.addResponder(responder);
					
					model.stormwater.searchPanel.getJournalEntries(0);
					
					PopUpManager.removePopUp(this);	
				}
			}
			

			
			protected function stormwaterAccountRetrieved(event:ResultEvent):void{
				model.stormwater.searchPanel.swuService,removeEventListener(ResultEvent.RESULT, stormwaterAccountRetrieved);
				var data:Array = JSON.decode(event.result.toString());
				if (data.length == 0){
					Alert.show("Stormwater Account not found");
				}else if (data.length == 1){
					model.stormwater.currentAccount = data[0];
				}
			}
			

			
			
			protected function btnCancel_clickHandler(event:MouseEvent):void
			{
				this.close();
			}
			
			protected function dataGrid_creationCompleteHandler(event:FlexEvent):void
			{
				model.stormwater.searchPanel.swuService.addEventListener(ResultEvent.RESULT, siteAddressesRetrieved);
				model.stormwater.searchPanel.swuService.send({
					'function':'getsiteaddresses',
					rpidmap:model.stormwater.currentAccount.RPID_MAP,
					rpidlot:model.stormwater.currentAccount.RPID_LOT, 
					addrid:model.stormwater.currentAccount.ADDRESS_ID,
					dbschema:model.stormwater.dbSchema,
					connstr:JSON.encode(model.stormwater.connstr)
				});
			}
			
			protected function siteAddressesRetrieved(event:ResultEvent):void{
				model.stormwater.searchPanel.swuService.removeEventListener(ResultEvent.RESULT, siteAddressesRetrieved);
				if (event.result.length > 0){
					var data:Array = JSON.decode(event.result.toString());
					dataGrid.dataProvider = new ArrayCollection(data);
					if (data.length > 0){
						model.stormwater.addresses = data[0];
					}else{
						Alert.show("No other Parcel or Building addresses found for this account, window closing...");
						PopUpManager.removePopUp(this);							
					}
				}
			}

			protected function dataGrid_changeHandler(event:ListEvent):void
			{
				if (event.itemRenderer.data.addressID==model.stormwater.currentAccount.addressID.toString())
				{  
					Alert.show("Address has not been changed, update was not performed...");					
				}
				else
				{
					model.stormwater.searchPanel.swuService.addEventListener(ResultEvent.RESULT, siteAddressesUpdated);
					var updates:Object = {
						address_id:event.itemRenderer.data.addressID,
						prev_address_id:model.stormwater.currentAccount.addressID
					};
					model.stormwater.searchPanel.swuService.send({
						'function':'updatesiteaddrid',
						acctid:model.stormwater.currentAccount.swu_account_id,
						updates:JSON.encode(updates), 
						dbschema:model.stormwater.dbSchema,
						connstr:JSON.encode(model.stormwater.connstr)
					});
				}
			}
			
		]]>
	</fx:Script>

	<s:Form width="328">
		<s:Form width="309">
			<s:FormItem width="283">
				<mx:DataGrid id="dataGrid" width="253" height="84"
							 change="dataGrid_changeHandler(event)"
							 creationComplete="dataGrid_creationCompleteHandler(event); "
							 doubleClickEnabled="true">
					<mx:columns>
						<mx:DataGridColumn visible="false" dataField="addressID" headerText="Addr ID"/>
						<mx:DataGridColumn dataField="siteAddress" headerText="Site Address"/>
						<mx:DataGridColumn dataField="addressType" headerText="Type"/>
					</mx:columns>
				</mx:DataGrid>
			</s:FormItem>
			<s:HGroup>
				<s:Button id="btnCancel" label="Cancel" click="btnCancel_clickHandler(event)"/>
			</s:HGroup>
			
		</s:Form>		
	</s:Form>
</toolbar:ToolWindow>
